import matplotlib.pyplot as plt
import os

# Ensure the image_2 directory exists
if not os.path.exists('image_2'):
    os.makedirs('image_2')

train_acc_t = [
    0.2968, 0.6551, 0.6553, 0.6569, 0.6581, 0.6602, 0.6609, 0.6610, 0.6619, 0.6621,
    0.6623, 0.6628, 0.6631, 0.6636, 0.6640, 0.6643, 0.6648, 0.6650, 0.6652, 0.6656
]

train_acc_a = [
    0.0649, 0.7105, 0.7190, 0.7214, 0.7219, 0.7225, 0.7207, 0.7214, 0.7216, 0.7221,
    0.7214, 0.7225, 0.7218, 0.7220, 0.7221, 0.7214, 0.7223, 0.7221, 0.7220, 0.7218
]

train_acc_v = [
    0.0216, 0.6734, 0.6753, 0.6734, 0.6722, 0.6734, 0.6694, 0.6708, 0.6731, 0.6717,
    0.6729, 0.6717, 0.6734, 0.6727, 0.6724, 0.6717, 0.6734, 0.6724, 0.6721, 0.6717
]

train_acc_m = [
    0.1537, 0.7110, 0.7183, 0.7220, 0.7218, 0.7223, 0.7206, 0.7211, 0.7202, 0.7208,
    0.7202, 0.7208, 0.7199, 0.7204, 0.7195, 0.7183, 0.7195, 0.7197, 0.7197, 0.7194
]


train_loss_t = [1.8487, 0.2716, 0.2705, 0.2566, 0.2270, 0.1873, 0.1976, 0.1874, 0.1796, 0.1877,
                0.1388, 0.1277, 0.1275, 0.1423, 0.1388, 0.1284, 0.0805, 0.1277, 0.0827, 0.0827]
train_loss_a = [2.1128, 0.4102, 0.3855, 0.4010, 0.4074, 0.4139, 0.4121, 0.4025, 0.4043, 0.4044,
                0.3997, 0.4103, 0.4117, 0.4145, 0.3997, 0.4022, 0.4130, 0.3986, 0.4162, 0.4162]
train_loss_v = [1.9616, 0.4334, 0.4066, 0.3837, 0.3777, 0.3573, 0.3199, 0.3308, 0.3159, 0.2996,
                0.3184, 0.2793, 0.3143, 0.2690, 0.2606, 0.2426, 0.2477, 0.2342, 0.2037, 0.2037]
train_loss_m = [1.9316, 0.9606, 0.9208, 0.8945, 0.8602, 0.8566, 0.7841, 0.7471, 0.7607, 0.7233,
                0.7248, 0.6922, 0.7084, 0.7009, 0.6461, 0.6738, 0.5979, 0.5544, 0.5808, 0.5808]

es_train_loss_t = [2.1325, 0.4063, 0.3528, 0.2788, 0.2415, 0.1569, 0.1622, 0.1954, 0.2125, 0.2234, 0.2415, 0.2588, 0.2678, 0.2370, 0.2678, 0.2588, 0.2370, 0.2588, 0.2370, 0.2588]
es_train_loss_a = [1.8936, 0.4703, 0.4239, 0.3816, 0.3790, 0.3638, 0.3638, 0.3728, 0.3737, 0.3786, 0.3790, 0.2685, 0.2629, 0.2629, 0.2580, 0.2685, 0.2629, 0.2685, 0.2629, 0.2685]
es_train_loss_v = [1.9020, 1.2097, 1.1466, 0.9436, 0.8010, 0.7261, 0.7874, 0.7261, 0.8095, 0.8966, 0.8010, 0.3911, 0.3969, 0.3911, 0.3937, 0.3911, 0.3911, 0.3911, 0.3911, 0.3911]
es_train_loss_m = [1.8803, 0.5678, 0.4610, 0.3463, 0.3270, 0.2970, 0.3270, 0.2970, 0.3571, 0.3229, 0.3270, 0.3996, 0.3691, 0.3996, 0.3996, 0.3996, 0.3996, 0.3996, 0.3996, 0.3996]
es_train_acc_t = [0.0417, 0.8333, 0.8333, 0.9167, 0.9167, 0.9583, 0.9167, 0.9583, 0.9583, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167]
es_train_acc_a = [0.2917, 0.7500, 0.7500, 0.8333, 0.8333, 0.8333, 0.8333, 0.7917, 0.8333, 0.8333, 0.8333, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167]
es_train_acc_v = [0.2083, 0.6250, 0.6667, 0.7917, 0.7500, 0.7917, 0.7500, 0.7917, 0.7917, 0.7500, 0.7500, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167]
es_train_acc_m = [0.2083, 0.7917, 0.8750, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.7917, 0.8333, 0.7917, 0.8333, 0.7917, 0.7917, 0.7917, 0.7917, 0.7917]

# Data for Early Stopped Model (改进后的模型数据)
# Training Loss
es_train_loss_t = [2.1325, 0.4063, 0.3528, 0.2788, 0.2415, 0.1569, 0.1622, 0.1954, 0.2125, 0.2234, 0.2415, 0.2588, 0.2678, 0.2370, 0.2678, 0.2588, 0.2370, 0.2588, 0.2370, 0.2588]
es_train_loss_a = [1.8936, 0.4703, 0.4239, 0.3816, 0.3790, 0.3638, 0.3638, 0.3728, 0.3737, 0.3786, 0.3790, 0.2685, 0.2629, 0.2629, 0.2580, 0.2685, 0.2629, 0.2685, 0.2629, 0.2685]
es_train_loss_v = [1.9020, 1.2097, 1.1466, 0.9436, 0.8010, 0.7261, 0.7874, 0.7261, 0.8095, 0.8966, 0.8010, 0.3911, 0.3969, 0.3911, 0.3937, 0.3911, 0.3911, 0.3911, 0.3911, 0.3911]
es_train_loss_m = [1.8803, 0.5678, 0.4610, 0.3463, 0.3270, 0.2970, 0.3270, 0.2970, 0.3571, 0.3229, 0.3270, 0.3996, 0.3691, 0.3996, 0.3996, 0.3996, 0.3996, 0.3996, 0.3996, 0.3996]

# Testing Loss
es_test_loss_t = [1.9541, 1.2965, 1.3207, 1.3297, 1.3527, 1.3735, 1.3901, 1.4152, 1.4194, 1.4475, 1.4614, 1.4855, 1.5005, 1.5165, 1.5338, 1.5546, 1.5590, 1.5908, 1.6097, 1.6267]
es_test_loss_a = [1.9426, 0.8345, 0.8198, 0.8152, 0.8131, 0.8122, 0.8124, 0.8137, 0.8140, 0.8142, 0.8141, 0.8151, 0.8155, 0.8161, 0.8160, 0.8164, 0.8174, 0.8182, 0.8185, 0.8196]
es_test_loss_v = [1.9909, 1.1208, 1.1322, 1.1466, 1.1686, 1.1802, 1.1961, 1.2141, 1.2291, 1.2359, 1.2519, 1.2708, 1.2845, 1.2904, 1.3058, 1.3140, 1.3154, 1.3244, 1.3460, 1.3568]
es_test_loss_m = [1.9508, 0.7938, 0.7733, 0.7641, 0.7606, 0.7579, 0.7573, 0.7583, 0.7579, 0.7596, 0.7631, 0.7659, 0.7694, 0.7726, 0.7777, 0.7801, 0.7870, 0.7898, 0.7966, 0.8033]

# Training Accuracy
es_train_Acc_t = [0.0417, 0.8333, 0.8333, 0.9167, 0.9167, 0.9583, 0.9167, 0.9583, 0.9583, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167]
es_train_Acc_a = [0.2917, 0.7500, 0.7500, 0.8333, 0.8333, 0.8333, 0.8333, 0.7917, 0.8333, 0.8333, 0.8333, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167]
es_train_Acc_v = [0.2083, 0.6250, 0.6667, 0.7917, 0.7500, 0.7917, 0.7500, 0.7917, 0.7917, 0.7500, 0.7500, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167]
es_train_Acc_m = [0.2083, 0.7917, 0.8750, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.9167, 0.7917, 0.8333, 0.7917, 0.8333, 0.7917, 0.7917, 0.7917, 0.7917, 0.7917]

# Testing Accuracy
es_test_acc_t = [
    0.2968, 0.6551, 0.6553, 0.6569, 0.6581, 0.6583,
    0.6583, 0.6602, 0.6609, 0.6603, 0.6610, 0.6636,
    0.6636, 0.6636, 0.6642, 0.6642, 0.6628, 0.6628,
    0.6624, 0.6593
]

es_test_acc_a = [
    0.0649, 0.7105, 0.7190, 0.7214, 0.7220, 0.7225,
    0.7225, 0.7211, 0.7206, 0.7206, 0.7206, 0.7202,
    0.7202, 0.7202, 0.7202, 0.7206, 0.7206, 0.7202,
    0.7214, 0.7214
]

es_test_acc_v = [
    0.0216, 0.6734, 0.6753, 0.6731, 0.6701, 0.6694,
    0.6722, 0.6690, 0.6683, 0.6696, 0.6690, 0.6670,
    0.6670, 0.6685, 0.6668, 0.6685, 0.6670, 0.6670,
    0.6654, 0.6654
]

es_test_acc_m = [
    0.1537, 0.7110, 0.7183, 0.7218, 0.7220, 0.7243,
    0.7246, 0.7246, 0.7253, 0.7255, 0.7258, 0.7256,
    0.7221, 0.7202, 0.7204, 0.7211, 0.7204, 0.7201,
    0.7216, 0.7216
]

# Data for Original LFMIM Model (原始模型数据)
# Training Loss


# Testing Loss
test_loss_t = [1.9043, 1.2758, 1.2984, 1.3238, 1.3411, 1.3574, 1.3814, 1.3990, 1.4235, 1.4407, 1.4577, 1.4822, 1.4996, 1.5232, 1.5330, 1.5627, 1.5746, 1.5843, 1.6078, 1.6308]
test_loss_a = [2.0881, 0.8402, 0.8187, 0.8154, 0.8156, 0.8163, 0.8168, 0.8179, 0.8177, 0.8185, 0.8193, 0.8199, 0.8218, 0.8220, 0.8224, 0.8227, 0.8233, 0.8236, 0.8250, 0.8262]
test_loss_v = [1.8992, 1.1212, 1.1110, 1.1176, 1.1409, 1.1582, 1.1657, 1.1807, 1.1976, 1.2053, 1.2166, 1.2304, 1.2404, 1.2515, 1.2578, 1.2694, 1.2786, 1.2940, 1.2979, 1.3035]
test_loss_m = [1.9322, 0.7955, 0.7761, 0.7686, 0.7627, 0.7621, 0.7616, 0.7605, 0.7633, 0.7646, 0.7670, 0.7683, 0.7720, 0.7768, 0.7772, 0.7828, 0.7874, 0.7905, 0.7954, 0.7998]



# Testing Accuracy
test_acc_t = [0.2477, 0.6616, 0.6621, 0.6623, 0.6631, 0.6650, 0.6643, 0.6640, 0.6628, 0.6624, 0.6642, 0.6636, 0.6640, 0.6623, 0.6624, 0.6619, 0.6593, 0.6610, 0.6591, 0.6586]
test_acc_a = [0.0696, 0.7110, 0.7190, 0.7216, 0.7214, 0.7218, 0.7216, 0.7214, 0.7221, 0.7223, 0.7219, 0.7224, 0.7224, 0.7228, 0.7219, 0.7221, 0.7219, 0.7218, 0.7216, 0.7209]
test_acc_v = [0.2275, 0.6708, 0.6781, 0.6755, 0.6732, 0.6727, 0.6729, 0.6734, 0.6731, 0.6717, 0.6723, 0.6723, 0.6716, 0.6709, 0.6706, 0.6715, 0.6694, 0.6697, 0.6667, 0.6674]
test_acc_m = [0.1978, 0.7107, 0.7171, 0.7206, 0.7220, 0.7223, 0.7211, 0.7208, 0.7194, 0.7202, 0.7197, 0.7195, 0.7187, 0.7199, 0.7204, 0.7204, 0.7201, 0.7209, 0.7209, 0.7197]

# Define colors for each modality
colors = ['blue', 'green', 'red', 'purple']

# Plot training loss with all modalities in one figure
plt.figure(figsize=(12, 8))
for i, (es_loss, original_loss) in enumerate(zip([es_train_loss_t, es_train_loss_a, es_train_loss_v, es_train_loss_m],
                                               [train_loss_t, train_loss_a, train_loss_v, train_loss_m])):
    plt.plot(es_loss, label=f'Improved Model ({["t", "a", "v", "m"][i]})', color=colors[i], linestyle='--', marker='.')
    plt.plot(original_loss, label=f'Original Model ({["t", "a", "v", "m"][i]})', color=colors[i], linestyle='-', marker='.')
plt.xlabel('Epoch')
plt.xticks(range(0, 21, 5))
plt.ylabel('Loss')
plt.title('Training Loss Comparison (All Modalities)')
plt.legend()
plt.grid(True)
plt.savefig('image_2/training_loss_all_modalities.png')
plt.close()

# Plot testing loss with all modalities in one figure
plt.figure(figsize=(12, 8))
for i, (es_loss, original_loss) in enumerate(zip([es_test_loss_t, es_test_loss_a, es_test_loss_v, es_test_loss_m],
                                               [test_loss_t, test_loss_a, test_loss_v, test_loss_m])):
    plt.plot(es_loss, label=f'Improved Model ({["t", "a", "v", "m"][i]})', color=colors[i], linestyle='--', marker='.')
    plt.plot(original_loss, label=f'Original Model ({["t", "a", "v", "m"][i]})', color=colors[i], linestyle='-', marker='.')
plt.xlabel('Epoch')
plt.xticks(range(0, 21, 5))
plt.ylabel('Loss')
plt.title('Testing Loss Comparison (All Modalities)')
plt.legend()
plt.grid(True)
plt.savefig('image_2/testing_loss_all_modalities.png')
plt.close()

# Plot training accuracy with all modalities in one figure
plt.figure(figsize=(12, 8))
for i, (es_acc, original_acc) in enumerate(zip([es_train_acc_t, es_train_acc_a, es_train_acc_v, es_train_acc_m],
                                             [train_acc_t, train_acc_a, train_acc_v, train_acc_m])):
    plt.plot(es_acc, label=f'Improved Model ({["t", "a", "v", "m"][i]})', color=colors[i], linestyle='--', marker='.')
    plt.plot(original_acc, label=f'Original Model ({["t", "a", "v", "m"][i]})', color=colors[i], linestyle='-', marker='.')
plt.xlabel('Epoch')
plt.xticks(range(0, 21, 5))
plt.ylabel('Accuracy')
plt.title('Training Accuracy Comparison (All Modalities)')
plt.legend()
plt.grid(True)
plt.savefig('image_2/training_accuracy_all_modalities.png')
plt.close()

# Plot testing accuracy with all modalities in one figure
plt.figure(figsize=(12, 8))
for i, (es_acc, original_acc) in enumerate(zip([es_test_acc_t, es_test_acc_a, es_test_acc_v, es_test_acc_m],
                                             [test_acc_t, test_acc_a, test_acc_v, test_acc_m])):
    plt.plot(es_acc, label=f'Improved Model ({["t", "a", "v", "m"][i]})', color=colors[i], linestyle='--', marker='.')
    plt.plot(original_acc, label=f'Original Model ({["t", "a", "v", "m"][i]})', color=colors[i], linestyle='-', marker='.')
plt.xlabel('Epoch')
plt.xticks(range(0, 21, 5))
plt.ylabel('Accuracy')
plt.title('Testing Accuracy Comparison (All Modalities)')
plt.legend()
plt.grid(True)
plt.savefig('image_2/testing_accuracy_all_modalities.png')
plt.close()